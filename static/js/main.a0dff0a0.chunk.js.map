{"version":3,"sources":["utils/Constants.js","components/MovieDetail.js","components/SearchBox.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["API_URL","API_KEY","MovieDetail","movieData","useState","movieMetaData","setMovieMetaData","useEffect","a","axios","get","imdbID","data","fetchData","className","Poster","src","alt","Title","imdbRating","Released","Runtime","Genre","Language","Director","Writer","Actors","Plot","SearchBox","timerID","onSelectItem","searchTerm","setSearchTerm","isSearching","setIsSearching","noSearchFound","setNoSearchFound","searchList","setSearchList","getMovieList","e","target","value","length","clearTimeout","setTimeout","Response","Search","splice","id","type","placeholder","onChange","fill","role","xmlns","viewBox","d","map","movieItem","onClick","Type","Year","Home","setMovieData","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0dff0a0.chunk.js","sourcesContent":["export const API_URL = \"https://www.omdbapi.com/\"\nexport const API_KEY = \"4304bb5b\"\nexport const SEARCH_DELAY = 300 //MS","import axios from 'axios'\nimport React, {useEffect, useState} from 'react'\nimport { API_KEY, API_URL } from '../utils/Constants';\n\nfunction MovieDetail({movieData}) {\n    const [movieMetaData, setMovieMetaData] = useState(\"\")\n    useEffect(() => {\n        async function fetchData() {\n            const {data} = await axios.get(`${API_URL}?i=${movieData.imdbID}&apikey=${API_KEY}`)\n            setMovieMetaData(data);\n        }\n        fetchData();\n    }, [movieData.imdbID])\n\n    return (<div className=\"movie-card\" data-testid=\"movie-card\">\n        {movieData.Poster !== 'N/A' && <div className=\"movie-right\" data-testid=\"movie-right\">\n            <img src={movieData.Poster} alt={movieData.Title} />\n        </div>}\n        <div className=\"movie-left\">\n            <div className=\"movie-header\">\n                <div className=\"movie-title\" data-testid=\"movie-title\">{movieData.Title}</div>\n                <div className=\"movie-rating\" data-testid=\"movie-rating\"><span>&#9733;</span> {movieMetaData.imdbRating} / 10</div>\n            </div>\n            <div className=\"movie-info\">{movieMetaData.Released} &#8226; {movieMetaData.Runtime} &#8226; {movieMetaData.Genre} &#8226; {movieMetaData.Language}</div>\n            <div className=\"movie-meta\"><b>Director:</b> {movieMetaData.Director}</div>\n            <div className=\"movie-meta\"><b>Writer:</b> {movieMetaData.Writer}</div>\n            <div className=\"movie-meta\"><b>Actors:</b> {movieMetaData.Actors}</div>\n            <div className=\"movie-meta\"><b>Plot:</b> {movieMetaData.Plot}</div>\n        </div>\n    </div>)\n}\n\nexport default MovieDetail;","import axios from 'axios';\nimport React, {useState} from 'react'\nimport { API_KEY, API_URL, SEARCH_DELAY } from '../utils/Constants';\n\nfunction SearchBox({onSelectItem}) {\n    const [searchTerm, setSearchTerm] = useState(\"\")\n    const [isSearching, setIsSearching] = useState(false)\n    const [noSearchFound, setNoSearchFound] = useState(false)\n    const [searchList, setSearchList] = useState([])\n\n    let timerID;\n    \n    const getMovieList = async (e) => {\n        const searchTerm = e.target.value;\n        setSearchTerm(searchTerm)\n        setNoSearchFound(false)\n        \n        if(searchTerm.length < 3) return false;\n\n        clearTimeout(timerID)\n        setIsSearching(true)\n        timerID = setTimeout(async () => {\n            const {data} = await axios.get(`${API_URL}?s=${searchTerm}&apikey=${API_KEY}`)\n            if(data.Response === \"True\") {\n                setSearchList(data.Search.splice(0,5));\n            } else {\n                setSearchList([]);\n                setNoSearchFound(true)\n            }\n            setIsSearching(false)\n        }, SEARCH_DELAY)\n    }\n\n    const selectMovie = (movieData) => {\n        setSearchTerm(\"\")\n        if(onSelectItem) onSelectItem(movieData);\n    }\n\n    return (<div className=\"inner-form\">\n    <div className=\"basic-search\">\n      <div className=\"input-field\">\n        <input id=\"search\" type=\"text\" value={searchTerm} data-testid=\"searchinput\" placeholder=\"Type Keywords\" onChange={getMovieList} />\n        <div className=\"icon-wrap\">\n          <svg fill=\"#ccc\" aria-hidden=\"true\"  role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path d=\"M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z\"></path>\n          </svg>\n        </div>\n      </div>\n    </div>\n    {searchTerm && <div className=\"autocomplete\">\n        {(!isSearching && !noSearchFound && searchList.length === 0) && <span className=\"desc\" data-testid=\"minimum\">Minimum 3 characters</span>}\n        {isSearching && <span className=\"desc\" data-testid=\"loding-movies\">Loading movie list ...</span>}\n        {(noSearchFound  && searchList.length === 0) && <span className=\"desc\" data-testid=\"no-movies\">No movies found</span>}\n        {(!isSearching && searchList.length > 0) && \n        <ul className=\"list\"  data-testid=\"list-movies\">\n            {\n                searchList.map(movieItem => (<li key={movieItem.imdbID} onClick={() => selectMovie(movieItem)}>\n                    <div className=\"movie-title\">{movieItem.Title}</div>\n                    <div className=\"movie-type\">{movieItem.Type}, {movieItem.Year}</div>\n                </li>))\n            }\n        </ul>\n        }\n    </div>}\n  </div>)\n}\n\nexport default SearchBox;","import React, {useState} from 'react'\nimport MovieDetail from './MovieDetail'\nimport SearchBox from './SearchBox'\n\nfunction Home() {\n    const [movieData, setMovieData] = useState(\"\")\n    return (<>\n    <SearchBox onSelectItem={setMovieData} />\n    {movieData && <MovieDetail movieData={movieData} />}\n    </>)\n}\n\nexport default Home","import './App.css';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"brand-name\">IMDB Movie Search</div>\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}